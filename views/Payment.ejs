<% include partials/head %>

<script src="https://js.stripe.com/v3/"></script>
<script>
	const stripePublicKey = "<%= locals.stripePublicKey %>";
	const stripe = Stripe(stripePublicKey);
	const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");
</script>

<div class="container container-single">
	<div class="single-wrapper">
		<div class="payment-form-wrapper col-6 offset-3">
			<h1 class="payment-price" style="color: white;"><% if (locals.totalPrice) { %><%= locals.totalPrice %><% } %>â‚¬</h1>
			<form action="" method="POST" id="payment-form">
				<input type="text" id="email" placeholder="Email address" required />
				<label for="card-element" class="card-label">
					Credit or debit card
				</label>
				<div class="form-row">
					<div id="card-element">
						<!-- A Stripe Element will be inserted here. -->
					</div>

					<!-- Used to display Element errors. -->
					<div id="card-errors" role="alert" class="card-error"></div>
				</div>

				<input type="hidden" name="_csrf" value="<%= locals.csrfToken %>" />
				<button class="btn-pay mt-3">Submit Payment</button>
			</form>
		</div>
	</div>
</div>

<script>
	let orderId;
	let clientSecret;
	let card;
	let data;

	async function initialize() {
		data = await fetch("/api/stripe/create-intent", {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				"CSRF-Token": csrfToken
			},
			body: []
		});
		data = await data.json();

		if (data.error === true) {
			let alert = createAlertNode(data.message, "warning");
			addAlert(alert, "#header");
			document.querySelector(".btn-pay").disabled = true;
			return;
		}
		orderId = data.orderId;
		clientSecret = data.clientSecret;

		let elements = stripe.elements();
		let style = {
			base: {
				"color": "#32325d",
				"fontFamily": '"Helvetica Neue", Helvetica, sans-serif',
				"fontSmoothing": "antialiased",
				"fontSize": "16px",
				"::placeholder": {
					color: "#aab7c4"
				}
			},
			invalid: {
				color: "#fa755a",
				iconColor: "#fa755a"
			}
		};

		let card = elements.create("card", { style: style });
		card.mount("#card-element");

		card.on("change", function (event) {
			document.querySelector("button").disabled = event.empty;
			document.querySelector("#card-errors").textContent = event.error ? event.error.message : "";
		});

		let form = document.getElementById("payment-form");
		form.addEventListener("submit", function (event) {
			event.preventDefault();
			payWithCard(stripe, card, data.clientSecret);
		});
	}

	initialize();

	let payWithCard = async function (stripe, card, clientSecret) {
		let result = await stripe.confirmCardPayment(clientSecret, {
			receipt_email: document.getElementById("email").value,
			payment_method: {
				card: card
			},
			shipping: {
				address: {
					city: "<%= locals.billing.city %>",
					country: "<%= locals.billing.country %>",
					line1: "<%= locals.billing.full_address %>",
					line2: null,
					postal_code: "<%= locals.billing.zipcode %>",
					state: "<%= locals.billing.state %>"
				},
				name: "<%= locals.billing.lastname %> <%= locals.billing.firstname %>",
				phone: null
			}
		});

		console.log(result);
		if (result.error) {
			let alert = createAlertNode(result.error.message, "warning");
			addAlert(alert, "#header");
			return;
		}

		/**/
		let confirm = await fetch("/api/order/confirm", {
			//to remove once live using webhooks
			method: "POST",
			headers: {
				"Content-Type": "application/json",
				"CSRF-Token": csrfToken
			},
			body: JSON.stringify({ type: "payment_intent.succeeded", data: { object: { id: result.paymentIntent.id } } })
		});

		if (confirm.error === true) {
			let alert = createAlertNode(confirm.message);
			addAlert(alert, "#header");
			return;
		} else {
			setTimeout(function () {
				window.location.href = `/api/cart/clear/${orderId}`;
			}, 2000);
		} /**/
	};
</script>
<% include partials/footer %>
